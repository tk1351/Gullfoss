import {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  NextPage,
} from 'next'
import PostPage from '../../components/pages/PostPage/PostPage'
import Head from 'next/head'
import BaseHeader from '../../components/organisms/BaseHeader/BaseHeader'
import { footerLinks, headerLinks } from '../../lib'
import BaseFooter from '../../components/organisms/BaseFooter/BaseFooter'
import { client } from '../../api'
import { PostItem } from '../../api/v1/posts'
import { ParsedUrlQuery } from 'querystring'

const id: NextPage<Props> = ({ post }) => {
  return (
    <div>
      <Head>
        <title>Gullfoss</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <main>
        <BaseHeader links={headerLinks} />
        <PostPage post={post} />
      </main>
      <BaseFooter links={footerLinks} />
    </div>
  )
}

interface Params extends ParsedUrlQuery {
  id: string
}

export const getStaticPaths: GetStaticPaths<Params> = async () => {
  const { contents } = await client.v1.posts.$get()
  const paths = contents.map((content) => {
    return {
      params: { id: content.id },
    }
  })

  return {
    fallback: true,
    paths,
  }
}

export const getStaticProps: GetStaticProps<
  { post: PostItem },
  Params
> = async (context) => {
  const post = await client.v1.posts._postId(context.params!.id).$get()
  return {
    props: { post },
  }
}

type Props = InferGetStaticPropsType<typeof getStaticProps>

export default id
